UEFI BOOTLOADER  DOCUMENT 


OS - Ubuntu
Version - 20.04




I followed the steps and link given by Varad sir :- 
https://davysouza.medium.com/my-first-uefi-application-486f319cf4a4




* Mount efi mode 


yogendra@yogendra:~$  mount | grep efi
efivarfs on /sys/firmware/efi/efivars type efivarfs (rw,nosuid,nodev,noexec,relatime)
/dev/sda1 on /boot/efi type vfat (rw,relatime,fmask=0077,dmask=0077,codepage=4


* Install Tree command


yogendra@yogendra:~$ sudo apt install tree
Reading package lists... Done
Building dependency tree           
Reading state information... Done
The following NEW packages will be installed:
  tree
0 upgraded, 1 newly installed, 0 to remove and 122 not upgraded.
Need to get 43.0 kB of archives.
After this operation, 115 kB of additional disk space will be used.
Get:1 http://in.archive.ubuntu.com/ubuntu focal/universe amd64 tree amd64 1.8.0-1 [43.0 kB]
Fetched 43.0 kB in 1s (63.8 kB/s)
Selecting previously unselected package tree.
(Reading database ... 179256 files and directories currently installed.)
Preparing to unpack .../tree_1.8.0-1_amd64.deb ...
Unpacking tree (1.8.0-1) ...
Setting up tree (1.8.0-1) ...
Processing triggers for man-db (2.9.1-1) ...




*  :- General command output : You can get the print (on the terminal) of the directory's content in the tree structure by executing




yogendra@yogendra:$ sudo tree /boot/efi/
/boot/efi/
└── EFI
        ├── BOOT
        │   ├── BOOTX64.EFI
        │   ├── fbx64.efi
        │   └── mmx64.efi
        └── ubuntu
            ├── BOOTX64.CSV
            ├── grub.cfg
            ├── grubx64.efi
            ├── mmx64.efi
            └── shimx64.efi


3 directories, 8 files


* OS version checked, we need to install the required packages:


yogendra@yogendra:~$  sudo apt install build-essential uuid-dev iasl git  nasm  python-is-python3
Reading package lists... Done
Building dependency tree           
Reading state information... Done
Note, selecting 'acpica-tools' instead of 'iasl'
The following additional packages will be installed:


binutils binutils-common binutils-x86-64-linux-gnu dpkg-dev fakeroot g++ g++-9 gcc gcc-9 git-man
  libalgorithm-diff-perl libalgorithm-diff-xs-perl libalgorithm-merge-perl libasan5 libatomic1
  libbinutils libc-dev-bin libc6-dev libcrypt-dev libctf-nobfd0 libctf0 liberror-perl libfakeroot
  libgcc-9-dev libitm1 liblsan0 libquadmath0 libstdc++-9-dev libtsan0 libubsan1 linux-libc-dev make
  manpages-dev
..
..
yogendra@yogendra:~/Downloads$  nasm --version
NASM version 2.15.05
yogendra@yogendra:~/Downloads$  mkdir ~/src
yogendra@yogendra:~/Downloads$  cd ~/src


* Go to the directory 


yogendra@yogendra:~/Downloads$ cd /Downloads


* Let’s download the gcc-arm cross-compiler:


yogendra@yogendra:~/Downloads$ wget -c http://security.ubuntu.com/ubuntu/pool/universe/n/nasm/nasm_2.15.05-1_amd64.deb
--2022-11-07 15:26:42--  http://security.ubuntu.com/ubuntu/pool/universe/n/nasm/nasm_2.15.05-1_amd64.deb
Resolving security.ubuntu.com (security.ubuntu.com)... 185.125.190.39, 91.189.91.39, 91.189.91.38, ...
Connecting to security.ubuntu.com (security.ubuntu.com)|185.125.190.39|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 375168 (366K) [application/x-debian-package]
Saving to: ‘nasm_2.15.05-1_amd64.deb’


nasm_2.15.05-1_amd6 100%[===================>] 366.38K   426KB/s        in 0.9s    


2022-11-07 15:26:43 (426 KB/s) - ‘nasm_2.15.05-1_amd64.deb’ saved [375168/375168]


* Then i go to sudo apt install directory /home/vbg/Downloads/nasm


yogendra@yogendra:~/Downloads$ sudo apt install /home/komi/Downloads/nasm_2.15.05-1_amd64.deb
Reading package lists... Done
Building dependency tree      
Reading state information... Done
Note, selecting 'nasm' instead of '/home/komi/Downloads/nasm_2.15.05-1_amd64.deb'
nasm is already the newest version (2.15.05-1).
The following packages were automatically installed and are no longer required:
  chromium-codecs-ffmpeg-extra gstreamer1.0-vaapi libgstreamer-plugins-bad1.0-0 libva-wayland2
Use 'sudo apt autoremove' to remove them.
0 upgraded, 0 newly installed, 0 to remove and 27 not upgraded.




* Now install nasm 


yogendra@yogendra:~/Downloads$ apt install nasm
Reading package lists... Done
Building dependency tree           
Reading state information... Done
nasm is already the newest version (2.14.02-1).
The following packages were automatically installed and are no longer required:
  chromium-codecs-ffmpeg-extra gstreamer1.0-vaapi
  libgstreamer-plugins-bad1.0-0 libva-wayland2
Use 'sudo apt autoremove' to remove them.
0 upgraded, 0 newly installed, 0 to remove and 115 not upgraded.
yogendra@yogendra:~/Downloads$ nasm --version
NASM version 2.14.02


* Make directory 


yogendra@yogendra:~/Downloads$ mkdir ~/src


yogendra@yogendra:~/Downloads$ cd ~/src


* Make git clone


yogendra@yogendra:~/src# git clone https://github.com/tianocore/edk2
Cloning into 'edk2'...
remote: Enumerating objects: 374622, done.
remote: Counting objects: 100% (151/151), done.
remote: Compressing objects: 100% (96/96), done.
remote: Total 374622 (delta 69), reused 117 (delta 55), pack-reused 374471
Receiving objects: 100% (374622/374622), 304.91 MiB | 7.89 MiB/s, done.
Resolving deltas: 100% (271506/271506), done.
 
* Go to edk2 directory


yogendra@yogendra:~/src# cd edk2/


* git-checkout - Checkout a branch or paths to the working tree / git-checkout - Switch branches or restore working tree files




yogendra@yogendra:~/src/edk2# git checkout tags/edk2-stable202208
Note: switching to 'tags/edk2-stable202208'.


You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.


If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:


  git switch -c <new-branch-name>


Or undo this operation with:


  git switch -


Turn off this advice by setting config variable advice.detachedHead to false


HEAD is now at ba0e0e4c6a BaseTools: Fix DevicePath GNUmakefile for macOS


yogendra@yogendra:~/src/edk2# git switch -c vbg
Switched to a new branch 'yogendra'


yogendra@yogendra:~/src/edk2# git branch
  master
* yogendra


yogendra@yogendra:~/src/edk2# git submodule update --init
Submodule 'SoftFloat' (https://github.com/ucb-bar/berkeley-softfloat-3.git) registered for path 'ArmPkg/Library/ArmSoftFloatLib/berkeley-softfloat-3'
Submodule 'BaseTools/Source/C/BrotliCompress/brotli' (https://github.com/google/brotli) registered for path 'BaseTools/Source/C/BrotliCompress/brotli'
Submodule 'CryptoPkg/Library/OpensslLib/openssl' (https://github.com/openssl/openssl) registered for path 'CryptoPkg/Library/OpensslLib/openssl'
Submodule 'MdeModulePkg/Library/BrotliCustomDecompressLib/brotli' (https://github.com/google/brotli) registered for path 'MdeModulePkg/Library/BrotliCustomDecompressLib/brotli'
Submodule 'MdeModulePkg/Universal/RegularExpressionDxe/oniguruma' (https://github.com/kkos/oniguruma) registered for path 'MdeModulePkg/Universal/RegularExpressionDxe/oniguruma'
Submodule 'RedfishPkg/Library/JsonLib/jansson' (https://github.com/akheron/jansson) registered for path 'RedfishPkg/Library/JsonLib/jansson'
Submodule 'UnitTestFrameworkPkg/Library/CmockaLib/cmocka' (https://github.com/tianocore/edk2-cmocka.git) registered for path 'UnitTestFrameworkPkg/Library/CmockaLib/cmocka'
Cloning into '/root/src/edk2/ArmPkg/Library/ArmSoftFloatLib/berkeley-softfloat-3'...
Cloning into '/root/src/edk2/BaseTools/Source/C/BrotliCompress/brotli'...
Cloning into '/root/src/edk2/CryptoPkg/Library/OpensslLib/openssl'...
Cloning into '/root/src/edk2/MdeModulePkg/Library/BrotliCustomDecompressLib/br




* Compile base tools


yogendra@yogendra:~/src/edk2#  make -C BaseTools
make: Entering directory '/root/src/edk2/BaseTools'
make -C Source/C
make[1]: Entering directory '/root/src/edk2/BaseTools/Source/C'
Attempting to detect HOST_ARCH from 'uname -m': x86_64
Detected HOST_ARCH of X64 using uname.
mkdir -p .
mkdir ./libs
make -C Common
make[2]: Entering directory '/root/src/edk2/BaseTools/Source/C/Common'
gcc  -c  -I .. -I ../Include/Common -I ../Include/ -I ../Include/IndustryStandard -I ../Common/ -I .. -I . -I ../Include/X64/ -MD -fshort-wchar -fno-strict-aliasing -fwrapv -fno-delete-null-pointer-checks -Wall -Werror -Wno-deprecated-declarations -Wno-stringop-truncation -Wno-restrict -Wno-unused-result -nostdlib -g -O2  BasePeCoff.c -o BasePeCoff.o
gcc  -c  -I .. -I ../Include/Common -I ../Include/ -I ../Include/IndustryStandard -I ../Common/ -I .. -I . -I ../Include/X64/ -MD -fshort-wchar -fno-strict-aliasing -fwrapv -fno-delete-null-pointer-checks -Wall -Werror -Wno-deprecated-declarations -Wno-stringop-truncation -Wno-restrict -Wno-unused-result -nostdlib -g -O2  BinderFuncs.c -o BinderFuncs.o
gcc  -c  -I .. -I ../Include/Common -I ../Include/ -I ../Include/IndustryStandard -I ../Common/ -I .. -I . -I ../Include/X64/ -MD -fshort-wchar -fno-strict-aliasing -fwrapv -fno-delete-null-pointer-checks -Wall -Werror -Wno-deprecated-declarations -Wno-stringop-truncation -Wno-restrict -Wno-unused-result -nostdlib -g -O2  CommonLib.c -o CommonLib.o
gcc  -c  -I .. -I ../Include/Common -I ../Include/ -I ../Include/IndustryStandard -I ../Common/ -I .. -I . -I ../Include/X64/ -MD -fshort-wchar -fno-strict-aliasing -fwrapv -fno-delete-null-pointer-checks -Wall -Werror -Wno-deprecated-declarations -Wno-stringop-truncation -Wno-restrict -Wno-unused-result -nostdlib -g -O2  Crc32.c -o Crc32.o


yogendra@yogendra:~/src/edk2#  export EDK_TOOLS_PATH=$HOME/src/edk2/BaseTools


yogendra@yogendra:~src/edk2# echo $EDK_TOOLS_PATH
/root/src/edk2/BaseTools


* Set up the build environment by running the edksetup.sh script provided in the source.


root@komi-Standard-PC-i440FX-PIIX-1996:~/src/edk2#  . edksetup.sh BaseTools
Loading previous configuration from /root/src/edk2/Conf/BuildEnv.sh
Using EDK2 in-source Basetools
WORKSPACE: /root/src/edk2
EDK_TOOLS_PATH: /root/src/edk2/BaseTools
CONF_PATH: /root/src/edk2/Conf


yogendra@yogendra:~/src/edk2#  . edksetup.sh BaseToolscp Conf/target.txt Conf/target.org
Usage: edksetup.sh [Options]


The system environment variable, WORKSPACE, is always set to the current
working directory.


Options:
  --help, -h, -?            Print this help screen and exit.


  --reconfig                Overwrite the WORKSPACE/Conf/*.txt files with the
                            template files from the BaseTools/Conf directory.


Please note: This script must be 'sourced' so the environment can be changed.
. edksetup.sh
source edksetup.sh




* Copy conf file
yogendra@yogendra:~/src/edk2# cp Conf/target.txt Conf/target.org


* This file is used to filter the build so that only required components are used. 
yogendra@yogendra:~/src/edk2#  vim Conf/target.txt


* diff stands for difference. This command is used to display the differences in the files by comparing the files line by line.


yogendra@yogendra:~/src/edk2# diff Conf/target.txt Conf/target.org


20,21c20
< #ACTIVE_PLATFORM       = EmulatorPkg/EmulatorPkg.dsc
< ACTIVE_PLATFORM       = MdeModulePkg/MdeModulePkg.dsc
---
> ACTIVE_PLATFORM       = EmulatorPkg/EmulatorPkg.dsc
45,46c44
< #TARGET_ARCH           = IA32
< TARGET_ARCH           = X64
---
> TARGET_ARCH           = IA32
56,57c54
< #TOOL_CHAIN_TAG        = VS2015x86
< TOOL_CHAIN_TAG        = GCC5
---
> TOOL_CHAIN_TAG        = VS2015x86


yogendra@yogendra:~/src/edk2# ls MdeModulePkg/Application/HelloWorld/
HelloWorld.c  HelloWorldExtra.uni  HelloWorld.inf  HelloWorldStr.uni  HelloWorld.uni
==
 
* Building MdeModulePkg module package
 
yogendra@yogendra:~/src/edk2# build
..
- Done -
Build end time: 13:25:52, Nov.06 2022
Build total time: 00:01:13
===
yogendra@yogendra:~/src/edk2# ls Build/MdeModule/DEBUG_GCC5/X64/HelloWorld.*
Build/MdeModule/DEBUG_GCC5/X64/HelloWorld.debug  Build/MdeModule/DEBUG_GCC5/X64/HelloWorld.efi
===
 
 yogendra@yogendra:~/src/edk2# sudo mkdir /boot/efi/EFI/helloloader
yogendra@yogendra:~~/src/edk2# sudo cp Build/MdeModule/DEBUG_GCC5/X64/HelloWorld.efi /boot/efi/EFI/helloloader
 
 
yogendra@yogendra:~/src/edk2# sudo tree /boot/efi/
/boot/efi/
└── EFI
    ├── BOOT
    │   ├── BOOTX64.EFI
    │   ├── fbx64.efi
    │   └── mmx64.efi
    ├── helloloader
    │   └── HelloWorld.efi
    └── ubuntu
        ├── BOOTX64.CSV
        ├── grub.cfg
        ├── grubx64.efi
        ├── mmx64.efi
        └── shimx64.efi
 
4 directories, 9 files
 
* Efibootmgr :- This command allows you to view the default boot entry (BootCurrent), boot order and all boot entries.
 
yogendra@yogendra:~/src/edk2#sudo efibootmgr -c -l \\EFI\\helloloader\\HelloWorld.efi -L HelloWorldLoader
 
BootCurrent: 0001
Timeout: 0 seconds
BootOrder: 0002,0001,0004,0000,0007
Boot0000* UiApp
Boot0001* ubuntu
Boot0004* UEFI QEMU HARDDISK QM00001
Boot0007* EFI Internal Shell
Boot0002* HelloWorldLoader


The only major change was the added line =>


SystemTable->BootServices->Stall(10000000);


Also, I experimented with changing colors - as you can see in the code (and some commented lines)..


Pls test, understand UEFI boot process and lets discuss...




Now add after add this file :- 
yogendra@yogendra:~/src/edk2# cat MdeModulePkg/Application/HelloWorld/HelloWorld.c


/** @file
  This sample application bases on HelloWorld PCD setting
  to print "UEFI Hello World!" to the UEFI Console.


  Copyright (c) 2006 - 2018, Intel Corporation. All rights reserved.<BR>
  SPDX-License-Identifier: BSD-2-Clause-Patent


**/


#include <Uefi.h>
#include <Library/PcdLib.h>
#include <Library/UefiLib.h>
#include <Library/UefiApplicationEntryPoint.h>


//
// String token ID of help message text.
// Shell supports to find help message in the resource section of an application image if
// .MAN file is not found. This global variable is added to make build tool recognizes
// that the help string is consumed by user and then build tool will add the string into
// the resource section. Thus the application can use '-?' option to show help message in
// Shell.
//
GLOBAL_REMOVE_IF_UNREFERENCED EFI_STRING_ID  mStringHelpTokenId = STRING_TOKEN (STR_HELLO_WORLD_HELP_INFORMATION);


/**
  The user Entry Point for Application. The user code starts with this function
  as the real entry point for the application.


  @param[in] ImageHandle    The firmware allocated handle for the EFI image.
  @param[in] SystemTable    A pointer to the EFI System Table.


  @retval EFI_SUCCESS       The entry point is executed successfully.
  @retval other             Some error occurs when executing this entry point.


**/
EFI_STATUS
EFIAPI
UefiMain (
//Entrypoint (
  IN EFI_HANDLE        ImageHandle,
  IN EFI_SYSTEM_TABLE  *SystemTable
  )
{
  UINT32  Index;


  Index = 0;


  //
  // Three PCD type (FeatureFlag, UINT32 and String) are used as the sample.
  //
  if (FeaturePcdGet (PcdHelloWorldPrintEnable)) {
    for (Index = 0; Index < PcdGet32 (PcdHelloWorldPrintTimes); Index++) {
      //
      // Use UefiLib Print API to print string to UEFI console
      //
      //Print ((CHAR16 *)PcdGetPtr (PcdHelloWorldPrintString));
      //AsciiPrint("Hello Interns, Have Fun!");
      //PrintXY(350,350,NULL,NULL,L"Adding some Color");
      //SystemTable->ConOut->SetAttribute(SystemTable->ConOut, EFI_BACKGROUND_GREEN);
      SystemTable->ConOut->SetAttribute(SystemTable->ConOut, EFI_YELLOW);
      //SystemTable->ConOut->SetAttribute(SystemTable->ConOut, EFI_TEXT_ATTR(EFI_YELLOW,EFI_BACKGROUND_GREEN));
      PrintXY(350,350,NULL,NULL,L"Hello Yogendra, Have Fun!");
    }
  }
  SystemTable->BootServices->Stall(10000000);
  return EFI_SUCCESS;
}


After that i run build command 




- Done -
Build end time: 01:07:34, Nov.17 2022
Build total time: 00:00:16


Now reboot your system..


$ sudo systemctl reboot 


















  

  

  

  



Output:


  
  









Insert Image in UEFI Bootloader
yogendra@yogendra:~
yogendra@yogendra:~$ sudo apt install gnu-efi
yogendra@yogendra:~$ mkdir tetris
yogendra@yogendra:~$ cd tetris
yogendra@yogendra:~/tetris$ git clone https://github.com/a1ive/uefi-tetris.git
Cloning into 'uefi-tetris'...
remote: Enumerating objects: 18, done.
remote: Total 18 (delta 0), reused 0 (delta 0), pack-reused 18
Unpacking objects: 100% (18/18), 51.38 KiB | 741.00 KiB/s, done.
yogendra@yogendra:~/tetris$ ls
uefi-tetris
yogendra@yogendra:~/tetris$ cd uefi-tetris/
yogendra@yogendra:~/tetris/uefi-tetris$ mv tetris.efi tetris-efi.org
yogendra@yogendra:~/tetris/uefi-tetris$ make
yogendra@yogendra:~/tetris/uefi-tetris$ sudo -i
yogendra@yogendra:~# mkdir /boot/efi/EFI/tetris
yogendra@yogendra:~# cp /home/vbg/tetris/uefi-tetris/tetris.efi /boot/efi/EFI/tetris/
yogendra@yogendra:~# ls -l /boot/efi/EFI/tetris/
total 60
-rwx------ 1 root root 60210 Nov 21 22:15 tetris.efi
yogendra@yogendra:~# logout
yogendra@yogendra:~/tetris/uefi-tetris$ sudo efibootmgr -c -l \\EFI\\tetris\\tetris.efi -L TetrisLoader
BootCurrent: 0001
Timeout: 0 seconds
BootOrder: 000A,0002,0001,0004,0000,0007,0003,0005,0006,0008,0009
Boot0000* UiApp
Boot0001* ubuntu
Boot0002* HelloWorldLoader
Boot0003* UEFI Floppy
Boot0004* UEFI QEMU HARDDISK QM00001
Boot0005* UEFI Floppy 2
Boot0006* UEFI QEMU DVD-ROM QM00002
Boot0007* EFI Internal Shell
Boot0008* UEFI PXEv4 (MAC:525400DFD8B3)
Boot0009* UEFI HTTPv4 (MAC:525400DFD8B3)
Boot000A* TetrisLoader
yogendra@yogendra:~/tetris/uefi-tetris$ sudo systemctl poweroff
====


Restart the PC to play Tetris..