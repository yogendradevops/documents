Varnish Cache Server 


Varnish is a versatile reverse HTTP proxy that caches responses from backend servers in memory so they are served quickly when requested again. It uses HTTP headers to determine whether to cache the responses to a particular request. By default, it does not cache responses with cookies because those are considered client-specific requests; however you can change this setting in the configuration file.
Besides acting as a caching server, Varnish can be used as a:
* Web application firewall
* DDoS attack defender
* Load balancer
* Quick fix for unstable backends
* HTTP router
There are three locations where the HTTP cache can be saved:
* Browser: This cache is saved on users’ browsers. It is user-specific and can be used to serve content instead of sending requests to web sites.
* Proxy: A proxy is an intermediate server that sits between users and servers. It is usually deployed by ISPs and can be used to cache responses that will be requested by multiple users.
* Reverse Proxy: This kind of proxy is created by the web site’s administrator and can be used to serve content from the network’s edge instead of sending requests to back end servers. This is the kind of cache you will create in this tutorial.
Step 1 — Installing Varnish And Apache
sudo apt-get update
sudo apt-get install apache2 -y
sudo apt-get install varnish -y




Check the status of Apache:


sudo systemctl status apache2


Next, check the status of Varnish with this command:
sudo systemctl status varnish


Step 2 — Configuring Varnish To Serve Apache’s Static Web Page


By default, Varnish listens on port 6081 and connects to a local web server on port 8080. 
First, we change Varnish’s listening port to 8080. Usually you would want the listening port to be 80, but because you are running Apache and Varnish on the same server, you’ll use port 8080 for Varnish and port 80 for Apache.


We create a file called customexec.conf in a new directory called varnish.service.d in /etc/systemd/system/ that will change the default ports.


sudo mkdir /etc/systemd/system/varnish.service.d


Use favourite text editor to create a new file called customexec.conf :
sudo vim /etc/systemd/system/varnish.service.d/customexec.conf


In customexec.conf, add the following content:
/etc/systemd/system/varnish.service.d/customexec.conf file
[Service]
ExecStart=
ExecStart=/usr/sbin/varnishd -j unix,user=vcache -F -a :8080 -T localhost:6082 -f /etc/varnish/default.vcl -S /etc/varnish/secret -s malloc,256m




Save and close the customexec.conf file. Then execute this command to reload the systemd services file from disk:
sudo systemctl daemon-reload


Then restart Varnish for changes to take effect.
sudo systemctl restart varnish


To make sure that Varnish is now listening on port 8080, use the netstat command to display all listening TCP sockets on the server.
sudo netstat -ltnp | grep 8080
Now that Varnish is running and listening to port 8080, you need to edit the default configuration file located at /etc/varnish/default.vcl:
sudo nano /etc/varnish/default.vcl
Copy
Navigate to the backend default block, and then change .port to 80, as shown here:
default.vcl file


# Default backend definition. Set this to point to your content server.
backend default {
    .host = "127.0.0.1";
    .port = "80";
}


Save and close the default.vcl file, then restart Varnish with this command:
sudo systemctl restart varnish


Step 3 — Testing Varnish Using wrk


wrk is a modern HTTP benchmarking tool. It is written in C, and can be used to load test web servers with many requests per second. In this step, you’ll use wrk to run tests against Apache and Varnish and then compare the results.
First you’ll need to install wrk by building it from source. Start by installing some build tools for C and git, which are required for building wrk from source:
sudo apt-get install build-essential libssl-dev git unzip -y


Then clone the git repository for wrk into the wrk directory:
git clone https://github.com/wg/wrk.git wrk
Change to that new directory:
cd wrk


Build the wrk executable with the make command:
make


Copy wrk to the /usr/local/bin directory so you can access it from anywhere in your directory structure:
sudo cp wrk /usr/local/bin
Now that you have wrk installed, use it to test the responsiveness of Apache with this command:
wrk -t2 -c1000 -d30s --latency http://server_ip/




This command uses the following arguments:
* -t2: This means run two threads.
* -c1000: Keep 1000 HTTP connections open.
* -d30s: Run the test for 30 seconds.
* --latency: Print latency statistics.


________________


Configuration File: /etc/varnish/default.vcl


vcl 4.0;


import directors;


backend web1 {
        .host = "127.0.0.1";
        .port = "8081";
        .probe = {
            .url = "/";
            .timeout = 1s;
            .interval = 5s;
            .window = 5;
            .threshold = 3;
        }
}


backend web2 {
        .host = "127.0.0.1";
        .port = "8082";
        .probe = {
            .url = "/";
            .timeout = 1s;
            .interval = 5s;
            .window = 5;
            .threshold = 3;
        }
}


sub vcl_init {
        new balancer = directors.round_robin();
        balancer.add_backend(web1);
        balancer.add_backend(web2);
}


sub vcl_recv {
        set req.backend_hint = balancer.backend();


}


sub vcl_deliver
{
        # Insert Diagnostic header to show Hit or Miss
        if (obj.hits > 0) {
            set resp.http.X-Cache = "HIT";
            set resp.http.X-Cache-Hits = obj.hits;
        }
        else {
            set resp.http.X-Cache = "MISS";
        }   
}
---------------------------------------------------------------------------------------------------------------------------
cat /etc/systemd/system/varnish.service.d/customexec.conf




[Service]
ExecStart=
ExecStart=/usr/sbin/varnishd -j unix,user=vcache -F -a :80 -T localhost:6082 -f /etc/varnish/default.vcl -S /etc/varnish/secret -s malloc,256m
#ExecStart=/usr/sbin/varnishd -j unix,user=vcache -F -a :8080 -T localhost:80 -f /etc/varnish/default.vcl -S /etc/varnish/secret -s malloc,256m


---------------------------------------------------------------------------------------------------------------------------


cat /lib/systemd/system/varnish.service


[Unit]
Description=Varnish Cache, a high-performance HTTP accelerator
Documentation=https://www.varnish-cache.org/docs/ man:varnishd


[Service]
Type=simple


# Maximum number of open files (for ulimit -n)
LimitNOFILE=131072


# Locked shared memory - should suffice to lock the shared memory log
# (varnishd -l argument)
# Default log size is 80MB vsl + 1M vsm + header -> 82MB
# unit is bytes
LimitMEMLOCK=85983232
ExecStart=/usr/sbin/varnishd \
              -j unix,user=vcache \
              -F \
              -a \
              -T localhost:6082 \
              -f /etc/varnish/default.vcl \
              -S /etc/varnish/secret \
              -s malloc,256m
ExecReload=/usr/share/varnish/varnishreload
ProtectSystem=full
ProtectHome=true
PrivateTmp=true
PrivateDevices=true


[Install]
WantedBy=multi-user.target


======================================================================